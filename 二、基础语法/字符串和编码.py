# -*- coding: utf-8 -*-
'''
模块名称：字符串和编码
文件描述: 介绍Python中字符串和编码的概念及使用方法
文件作者：林风  
创建日期：2025-04-10

'''

# 字符串
# 字符串是由0个或多个字符组成的序列，每个字符都有唯一的编码，称为字符编码。
# Python中的字符串是以Unicode编码的，Unicode编码是一种字符集，它将所有语言的字符都用一个唯一的数字来表示。
# 字符串的创建
# 1. 使用单引号或双引号
# 2. 使用三引号（'''...'''或"""..."""）创建多行字符串
# 3. 使用r或R前缀创建原始字符串，即不转义字符串中的特殊字符
# 4. 使用+运算符连接字符串
# 5. 使用format()方法格式化字符串
# 6. 使用[]运算符访问字符串中的字符
# 7. 使用len()函数获取字符串的长度
# 8. 使用in和not in运算符判断字符串是否包含某字符
# 9. 使用upper()、lower()、capitalize()、title()等方法对字符串进行大小写转换
# 10. 使用strip()、lstrip()、rstrip()等方法去除字符串两端的空白字符
# 11. 使用replace()方法替换字符串中的子串
# 12. 使用split()方法分割字符串
# 13. 使用join()方法合并字符串
# 14. 使用isdigit()、isalpha()、isalnum()等方法判断字符串是否只包含数字、字母、数字和字母
# 15. 使用encode()方法将字符串编码为指定的编码格式
# 16. 使用decode()方法将字符串解码为指定的编码格式


# 编码
# 编码是将字符转换为机器可读的二进制数的过程，它是计算机和人类之间交流的语言。
# Python中的字符串都是Unicode编码的，因此，字符串的编码方式也就决定了字符串的显示效果。
# Python中的字符串编码有以下几种常见方式：
# 1. ASCII编码：ASCII编码是最早的编码方式，它使用7位的二进制数表示所有字符，共有128个字符。 
#   如全是英文字符的字符串，可以用ASCII编码。
# 3. GB2312编码：GB2312编码是中国的中文编码，它包含了GBK编码的所有字符。
# 4. unicode编码：Unicode编码是一种字符集，它将所有语言的字符都用一个唯一的数字来表示。
#   如包含中文、日文、韩文等字符的字符串，可以用Unicode编码。
# 5. 其他编码：还有一些编码方式，如UTF-8、GBK、GB2312等。
# 6. 自动编码：Python中的字符串默认使用Unicode编码，但也可以使用其他编码方式。
#   如在文件中存储的字符串是UTF-8编码，则可以用open()函数打开文件时指定encoding参数为UTF-8。
# 如果没有特殊业务要求，请牢记仅使用UTF-8编码。
# 7. 编码转换：Python中的字符串编码转换可以使用encode()和decode()方法实现。

# 字符串格式化
# 字符串格式化是指将变量的值插入到字符串中，以便生成最终的输出结果。
# Python中的字符串格式化有两种方式：
# 1. 旧式字符串格式化：使用%运算符来格式化字符串。
# 2. 新式字符串格式化：使用format()方法来格式化字符串。
# 3. f-string格式化：使用f-string语法来格式化字符串。
# 4. str.format()方法：使用str.format()方法来格式化字符串。

# 字符串格式化推荐使用f-string格式化，它是Python3.6版本引入的新语法。
# 示例：
# name = "Alice"
# age = 25
# print(f"Hello, {name}. You are {age} years old.")

# 练习：
# 1. 请用字符串格式化输出以下内容：
#    姓名：张三
#    性别：男
#    年龄：25
# 在文档头部添加以下代码：
# # -*- coding: utf-8 -*-


name = '张三'
gender = '男'
age = 25
print(f'姓名：{name}\n性别:{gender}\n年龄:{age}')
