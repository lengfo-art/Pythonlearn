# 1. 位置参数
# 2. 可变参数   *args

#     1. 在形参前加*号，参数args接收到的是一个tuple，调用该函数时，可以传入任意个参数，包括0个参数
#     2. 允许你在list或tuple前面加一个*号，把list或tuple的元素变成可变参数传进去，即实参可以在列表或元组前加**传进去
#     3. ```python
def func_total(*args):
    '''
    计算任意多个数的总和
    :param args: 任意多个数
    :return: 总和
    '''
    print(args)  # 输出传入的参数,类型为元组
    total = 0
    for num in args:
        total += num
    return total

nums = [0, 9, 3, 5, 5]
total = func_total(*nums)  # 使用*运算符将列表解包为多个参数传入函数


# 3. 关键字参数

#     1. 关键字参数允许你传入0个或任意个含参数名的参数，这些关键字参数在函数内部自动组装为一个dict
#     2. ```python
def func_sys(name,age,**kwargs):
    '''
    处理人员信息
    ：kwargs: 任意多个关键字参数
    :param name: 姓名
    :param age: 年龄
    :param kwargs: 其他信息
    :return: 信息
    '''
    print(name)  # 输出：姓名
    print(age)  # 输出：年龄
    print(kwargs)  # 输出：其他信息,类型为字典
    
    return name, age, kwargs  # 返回姓名、年龄和其他信息

other = {'di': '永州', 'iphone': '13974618136', 'address': '湖南省永州市'}
# 使用**运算符将字典解包为多个关键字参数传入函数

sys=func_sys('bingbing',20, **other)  # **运算符将字典解包为多个关键字参数传入函数
print(sys)  # 输出：姓名、年龄和其他信息

# 4. 命名关键字参数

  
def func_sys2(name, age, *, di='永州', iphone, address):
    '''
    处理人员信息
    :param name: 姓名 # 位置参数
    :param age: 年龄 # 位置参数
    :param di: 地区  # 命名关键字参数
    :param iphone: 电话号码 # 命名关键字参数
    :param address: 地址 # 命名关键字参数
    :return: 信息
    '''
    print(name)  # 输出：姓名
    print(age)  # 输出：年龄
    print(di)  # 输出：地区
    print(iphone)  # 输出：电话号码
    print(address)  # 输出：地址
    return name, age, di, iphone, address  # 返回姓名、年龄、地区、电话号码和地址

dict = {'di': '永州', 'iphone': '13974618136', 'address': '湖南省永州市'}  
# 使用**运算符将字典解包为多个关键字参数传入函数,但是也必须使用关键字参数的名称来传递参数
func_sys2('bingbing', 20,  **dict)  # 调用函数时，必须使用关键字参数的名称来传递参数
       
'''5. 参数组合

    1. 用必选参数、默认参数、可变参数、关键字参数和命名关键字参数，这5种参数都可以组合使用。
    2. 参数定义的**顺序**必须是：必选参数、默认参数、可变参数、命名关键字参数和关键字参数。
    3. 不要同时使用太多的组合，否则函数接口的可理解性很差。



6.

Python的函数具有非常灵活的参数形态，既可以实现简单的调用，又可以传入非常复杂的参数。

默认参数一定要用不可变对象，如果是可变对象，程序运行时会有逻辑错误！

要注意定义可变参数和关键字参数的语法：

`*args`是可变参数，args接收的是一个tuple；

`**kw`是关键字参数，kw接收的是一个dict。

以及调用函数时如何传入可变参数和关键字参数的语法：

可变参数既可以直接传入：`func(1, 2, 3)`，又可以先组装list或tuple，再通过`*args`传入：`func(*(1, 2, 3))`；

关键字参数既可以直接传入：`func(a=1, b=2)`，又可以先组装dict，再通过`**kw`传入：`func(**{'a': 1, 'b': 2})`。

使用`*args`和`**kw`是Python的习惯写法，当然也可以用其他参数名，但最好使用习惯用法。

命名的关键字参数是为了限制调用者可以传入的参数名，同时可以提供默认值。

定义命名的关键字参数在没有可变参数的情况下不要忘了写分隔符`*`，否则定义的将是位置参数。
'''

# 函数参数种类
# 1. 必须参数
# 2. 默认参数
# 3. 可变参数
# 4. 关键字参数
# 5. 命名关键字参数
# 6. 强制位置参数   
# 7. 强制关键字参数
# 8. 强制位置参数和强制关键字参数结合使用   

# 9. 强制位置参数和强制关键字参数结合使用，且有默认值
# 10. 强制位置参数和强制关键字参数结合使用，且有默认值和可变参数

# 1、必须参数：：
def add(a, b):   # 必须参数是函数定义时必须提供的参数，调用函数时必须传入这些参数的值。
    return a + b

add(5, 10)  # 调用函数时必须传入参数的值
# add(5)  # 调用函数时必须传入参数的值，否则会引发TypeError异常，提示缺少参数

# 2、默认参数：
def add1(a, b=10):  # 默认参数是函数定义时可以提供的参数，如果调用函数时没有传入这些参数的值，则使用默认值。
    return a + b

add1(5)  # 调用函数时没有传入参数b的值，则使用默认值10

add1(5, 20)  # 调用函数时传入参数b的值，则使用传入的值20

# 3、可变参数：
def add2(*args):  # 可变参数是函数定义时可以提供的参数，可以接收任意数量的位置参数。
    result = 0
    for arg in args:
        result += arg
    return result

add2(1, 2, 3)  # 调用函数时传入任意数量的位置参数
tu1ple1 = (1, 2, 3,5,6,7)

add2(*tu1ple1)  # 调用函数时传入任意数量的位置参数，使用*运算符将元组解包为位置参数

add2(10,*tu1ple1)  # 调用函数时传入任意数量的位置参数，使用*运算符将元组解包为位置参数,并传入一个额外的位置参数10

# 4、关键字参数：
def add3(**kwargs):  # 关键字参数是函数定义时可以提供的参数，可以接收任意数量的关键字参数。
    result = 0
    for key, value in kwargs.items():
        result += value
    return result

dict1 = {'a': 1, 'b': 2, 'c': 3} # 创建一个字典，包含多个键值对
add3(**dict1)  # 调用函数时传入任意数量的关键字参数，使用**运算符将字典解包为关键字参数
add3(d=10, **dict1)  # 调用函数时传入任意数量的关键字参数，使用**运算符将字典解包为关键字参数，并传入一个额外的关键字参数d=10

# 5、命名关键字参数：
def add4(a, b, *, c):  # 命名关键字参数是函数定义时可以提供的参数，必须使用关键字传入这些参数的值。
    return a + b + c

add4(1, 2, c=3)  # 调用函数时必须使用关键字传入参数c的值
# add4(1, 2, 3)  # 调用函数时必须使用关键字传入参数c的值，否则会引发TypeError异常，提示缺少参数c的值

# 6、强制位置参数：
def add5(a, b, /, c):  # 强制位置参数，即  / 前的参数。是函数定义时必须使用位置传入的参数，不能使用关键字传入这些参数的值。
    return a + b + c

add5(1, 2, 3)  # 调用函数时必须使用位置传入参数a和b的值，不能使用关键字传入参数c的值
print(add5(1, 2, c=3))  # 调用函数时 / 前面的参数必须使用位置传入，/ 后面和*前面（即/和*中间）的参数可以使用关键字传入，也可以使用位置传入

# 7、强制关键字参数：
def add6(a, b, *, c):  # 强制关键字参数，即是 * 号之后的参数。是函数定义时必须使用关键字传入的参数，不能使用位置传入这些参数的值。
    return a + b + c

add6(1, b=2, c=3)  # 调用函数时必须使用关键字传入参数c的值,当然其前面因没有用/，所以也可以使用关键字传入参数a和b的值
# add6(a=1, 2, c=3)  # 但是调用函数实参，必须是位置参数在前，关键字参数在后，否则会引发TypeError异常，提示缺少参数c的值

# 8、强制位置参数和强制关键字参数结合使用：
def add7(a, b, /, c,*, d):  # 强制位置参数和强制关键字参数结合使用，即是 / 前的参数必须使用位置传入，* 后的参数必须使用关键字传入
    return a + b + c+d

add7(1, 2, c=3, d=4)  # 调用函数时必须使用位置传入参数a和b的值，必须使用关键字传入参数d的值

# 9、强制位置参数和强制关键字参数结合使用，且有默认值：
def add8(a, b, /, c=10, *, d=20):  # 强制位置参数和强制关键字参数结合使用，且有默认值，即是 / 前的参数必须使用位置传入，* 后的参数必须使用关键字传入
    return a + b + c+d


# 如上面的函数参数组合使用，，直接使用*args和**kwargs来接收任意数量的位置参数和关键字参数，

def add10(*args,**kwargs): # 直接只使用*args和**kwargs来接收任意数量的位置参数和关键字参数，
    result = 0
    for arg in args:
        result += arg
    for key, value in kwargs.items():  #  # 遍历字典中的键值对
        result += value
    return result

# 调用时，先把位置参数打包成元组，再把关键字参数打包成字典，传递给函数，分别传递给*args和**kwargs

tulple1 = (1, 2, 3, 4, 5)  # 创建一个元组，包含多个位置参数
dict1 = {'a': 6, 'b': 7, 'c': 8}  # 创建一个字典，包含多个关键字参数
f=add10(*tulple1, **dict1)  # 调用函数时传入任意数量的位置参数和关键字参数，使用*运算符将元组解包为位置参数，使用**运算符将字典解包为关键字参数

print(f)

